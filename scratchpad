// Copyright 2020 Arthur Sonzogni. All rights reserved.
// Use of this source code is governed by the MIT license that can be found in
// the LICENSE file.
#include <cstddef>  // for size_t
#include <memory>    // for shared_ptr, __shared_ptr_access, allocator
#include <string>  // for string, basic_string, to_string, operator+, char_traits
#include <vector>  // for vector
#include <iostream>
#include <sstream>
#include "banner.h"
#include "ftxui/component/captured_mouse.hpp"  // for ftxui
#include "ftxui/component/component.hpp"  /
#include "ftxui/component/component_base.hpp"      // for ComponentBase
#include "ftxui/component/screen_interactive.hpp"  // for ScreenInteractive
#include "ftxui/dom/elements.hpp"  /
#include "ftxui/dom/flexbox_config.hpp"
#include "ftxui/screen/color.hpp"        // for Color, Color::Black

using namespace ftxui;

Component Wrap(std::string name, Component component) {
    return Renderer(component, [name, component] {
        return hbox({
            text(name) | size(WIDTH, EQUAL, 15),
            separator() | color(Color::Default),
            component->Render() | xflex,
        });
    });
}


// Function to split the file content into lines and store in a vector
std::vector<std::string> splitLines(const std::string &str) {
    std::vector<std::string> lines;
    std::istringstream stream(str);
    std::string line;

    while (std::getline(stream, line)) {
        lines.push_back(line);
    }

    return lines;
}

auto button_style = ButtonOption::Animated();
// Definition of the main component. The details are not important.
Component MainComponent(std::function<void()> show_modal,
                        std::function<void()> exit,
                        std::vector<std::string> lines) {
    auto mainScreen = Renderer([&] {
        Elements children = {
            paragraph(lines[1]),
        };
        for (size_t i = std::max(0, (int) lines.size() - 60); i < lines.size(); ++i) {
            children.push_back(text(lines[i]));
        }
        return flexbox(children) | center | color(Color::Yellow) | borderDouble | flex;
    });
    return mainScreen;
}

// Definition of the modal component. The details are not important.
Component ModalComponent(std::function<void()> do_nothing,
                         std::function<void()> hide_modal) {
    auto component = Container::Vertical({
        Button("Do nothing", do_nothing, button_style),
        Button("Quit modal", hide_modal, button_style),
    });
    // Polish how the two buttons are rendered:
    component |= Renderer([&](Element inner) {
      return vbox({
                 text("Modal component "),
                 separator(),
                 inner,
             })                               //
             | size(WIDTH, GREATER_THAN, 30)  //
             | border;                        //
    });
    return component;
}

int main() {
    // State of the application:
    bool modal_shown = false;
    auto screen = ScreenInteractive::Fullscreen();
    // Some actions modifying the state:
    auto show_modal = [&] { modal_shown = true; };
    auto hide_modal = [&] { modal_shown = false; };
    auto exit = screen.ExitLoopClosure();
    auto do_nothing = [&] {
    };


    std::vector<std::string> lines = splitLines(fileContent);

    auto main_component = MainComponent(show_modal, exit,lines);
    auto modal_component = ModalComponent(do_nothing, hide_modal);

    main_component |= Modal(modal_component, &modal_shown);
    screen.Loop(main_component);
}
